

1. C语言宏定义后面的UL等

   U表示unsigned无符号，例如100U表示这是一个无符号整数。
   L表示long长整数，例如100L表示这是一个长整数。
   UL表示unsigned long无符号长整数，例如100UL表示这是一个无符号长整数。

   在C语言中，除了U、L、UL等后缀外，还有其他一些后缀可以用来指定数据类型：

   F或f：表示该常数是float类型的浮点数。例如，#define PI 3.14F，这里的PI就是一个float类型的浮点数。
   L或l：当用于浮点数时，表示该常数是long double类型的浮点数。例如，#define PI 3.14L，这里的PI就是一个long double类型的浮点数。
   如果浮点数没有后缀，则默认为double类型。



2. C语言的连接符##，连接两个字符串，组成一个新变量   //各部分都是字符串，最后结果是一个变量

   #define NRFX_CONCAT_2_(p1, p2)         p1 ## p2


   #define NRFX_CONCAT_3_(p1, p2, p3)    p1 ## p2 ## p3


   示例： 
   #define _NRF_DRV_UART_CREATE_UART(id)    NRF_DRV_UART_CREATE_UART_##id

   _NRF_DRV_UART_CREATE_UART(0)  -->    NRF_DRV_UART_CREATE_UART_0


3.  C语言的字符串化操作符# （把代码转化为字符串，并跟其他字符串连在一起）   //各部分是字符串，最后结果也是字符串

      #define MAKE_STR(s) ("321" # s "654\n")

      printf(MAKE_STR(hello world));

      输出结果: 
           321hello world654


4. assert 断言

    assert的作用是现计算表达式 expression ，如果其值为假（即为0），那么它先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。

      if(假设成立) 
           程序正常运行； 
      else 
            报错&&终止程序！（避免由程序运行引起更大的错误）  


5. enum详解： 可以看作是一种特殊的数组，是常量组成的列表，而且这个常量只能是整数型

      示例1： （不推荐）

         enum DAY
         {
            MON=1, TUE, WED, THU, FRI, SAT, SUN
         };
       
         int main()
         {
            enum DAY day;

            day = WED;
            printf("%d",day);     
         }

      示例2： （推荐）

         typedef enum 
         {
            MON=1, TUE, WED, THU, FRI, SAT, SUN
         }DAY_t ;
       
         int main()
         {
            DAY_t  day;

            day = WED;
            printf("%d",day);     
         }



6. C语言中定义case样的值

      #define ADC_CARTES_REG_20_PGA_GAIN(x) ( \
          (x) == 4 ? ADC_CARTES_REG_20_PGA_GAIN_4 : \
          (x) == 8 ? ADC_CARTES_REG_20_PGA_GAIN_8 : \
          ADC_CARTES_REG_20_PGA_GAIN_4                     /* other value: use the least gain*/ \
      )


7.  用COUNTOF计算结构数组的元素个数

    I3C_CCCTypeDef   CCCList[] =
    {
      Target Addr    CCC Value    CCC data pointer     CCC size         Direction       

       { 32,          8D,          {NULL,                  6},             1<<16 },
        { 32,          8E,          {NULL,                  1},             1<<16 },
        { 32,          8F,          {NULL,                  1},             1<<16 },
        { 32,          8B,          {NULL,                  2},             1<<16 },
        { 32,          8C,          {NULL,                  2},             1<<16 },
        { 32,          90,          {NULL,                  2},             1<<16 },
    };

    #define COUNTOF( BUFF )   (  sizeof( BUFF ) / sizeof(*(BUFF))  )

   COUNTOF( CCCList)；













 
